hospital
## rate
}
best <- function(state, outcome) {
## Read outcome data
outcome_d <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
#将outcome的三列重命名
outcome_d[,11] <- as.numeric(outcome_d[,11])
colnames(outcome_d)[11] <- "heart attack"
outcome_d[,17] <- as.numeric(outcome_d[,17])
colnames(outcome_d)[17] <- "heart failure"
outcome_d[,23] <- as.numeric(outcome_d[,23])
colnames(outcome_d)[23] <- "pneumonia"
#将state列的格式设为factor
outcome_d$State <- as.factor(outcome_d$State)
#检查state有效性
if (any(outcome_d$State==state)==F){
stop("invalid state")
}
#检查outcome有效性
if (any(c("heart attack","heart failure","pneumonia")==outcome)==F){
stop("invalid outcome")
}
## Return hospital name in that state with lowest 30-day death
if (any(outcome_d$State==state)&any(c("heart attack","heart failure","pneumonia")==outcome){
outcome_state <- subset(outcome_d,outcome_d$State==state)
hospital <-outcome_state[which.min(outcome_state$outcome),][,2]
}
hospital
## rate
}
best <- function(state, outcome) {
outcome_d <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome_d[,11] <- as.numeric(outcome_d[,11])
colnames(outcome_d)[11] <- "heart attack"
outcome_d[,17] <- as.numeric(outcome_d[,17])
colnames(outcome_d)[17] <- "heart failure"
outcome_d[,23] <- as.numeric(outcome_d[,23])
colnames(outcome_d)[23] <- "pneumonia"
outcome_d$State <- as.factor(outcome_d$State)
if (any(outcome_d$State==state)==F){
stop("invalid state")
}
if (any(c("heart attack","heart failure","pneumonia")==outcome)==F){
stop("invalid outcome")
}
outcome_state <- subset(outcome_d,outcome_d$State==state)
hospital <-outcome_state[which.min(outcome_state$outcome),][,2]
hospital
}
source("best.R")
best("TX", "heart attack")
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
vignette()
vignette(sapply)
vignette("sapply")
vignette("apply")
example("split")
RSiteSearch("split")
swirl()
swirl()
swirl()
library(swirl)
swirl()
mydf <- read.csv(path2csv,stringsASFactors=FALSE)
?read.csv
mydf <- read.csv(path2csv,stringsASFactors=FALSE)
mydf <- read.csv(path2csv,stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tb1_df(mydf)
View(cran)
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
?xmlTreeParse
library(XML)
?xmlTreeParse
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml "
doc <- xmlTreeParse(fileUrl,useInternal=TRUE)
doc <- xmlTreeParse(fileUrl,useInternal=TRUE)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml "
doc <- xmlTreeParse(fileUrl,useInternal=TRUE)
fileUrl <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml "
doc <- xmlTreeParse(fileUrl,useInternal=TRUE)
doc <- xmlTreeParse(fileUrl,useInternal=TRUE)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml "
fileUrl2 <- sub('https','http',fileUrl)
doc <- xmlTreeParse(fileUrl2,useInternal=TRUE)
library(httr)
doc <- xmlTreeParse(fileUrl2,useInternal=TRUE)
library(RCurl)
library(XML)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml "
fileUrl2 <- sub('https','http',fileUrl)
doc <- xmlTreeParse(fileUrl2,useInternal=TRUE)
library(httr)
xData <- getURL(fileUrl)
doc <- xmlParse(xData)
doc <- xmlTreeParse(xData)
?xmlTreeParse
library(XML)
?xmlTreeParse
library(RCurl)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml "
fileUrl2 <- sub('https','http',fileUrl)
doc <- xmlTreeParse(fileUrl2,useInternal=TRUE,isURL=TRUE)
doc <- xmlTreeParse(fileUrl2,isURL=TRUE)
fileUrl <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml "
doc <- xmlTreeParse(fileUrl,useInternal=TRUE,isURL=TRUE)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
fileUrl2 <- sub('https','http',fileUrl)
doc <- xmlTreeParse(fileUrl2,useInternal=TRUE,isURL=TRUE)
xData <- getURL(fileUrl)
library(httr)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "88d492d96050fb5628d6","cee889addde150e5d7e9a8590de7027f488085ab")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
2
myapp <- oauth_app("github", "88d492d96050fb5628d6","cee889addde150e5d7e9a8590de7027f488085ab")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "88d492d96050fb5628d6","cee889addde150e5d7e9a8590de7027f488085ab")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "88d492d96050fb5628d6","cee889addde150e5d7e9a8590de7027f488085ab")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "88d492d96050fb5628d6","cee889addde150e5d7e9a8590de7027f488085ab")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "88d492d96050fb5628d6","cee889addde150e5d7e9a8590de7027f488085ab")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
jt <- content(req)
rep2 <- GET(""https://api.github.com/rate_limit"",gtoken)
rep2 <- GET("https://api.github.com/rate_limit",gtoken)
jt[[datasharing]]
jt[[datasharing repo]]
jt[[datasharingrepo]]
jt[[datasharing_repo]]
jt[[repo]]
df <- as.data.frame(jt)
json <- jsonlite::fromJSON(toJSON(jt))
library("jsonlite", lib.loc="F:/R/R-3.1.0/library")
json <- jsonlite::fromJSON(toJSON(jt))
df <- as.data.frame(jt)
df <- as.data.frame(json)
View(df)
colNames(df)
colnames(df)
library(dplyr)
?filter
df1 <-filter(df,name="datasharing")
View(df)
?filter
df1 <-df[df$name="datasharing",df$created_at]
df1 <-df[df$name="datasharing",df$created_at]
df1 <-df[df$name=="datasharing",df$created_at]
df1 <-df[df$name=="datasharing",created_at]
df1 <-df[df$name=="datasharing",45]
View(json)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
res <- gather(students2,sex_class,count,-grade)
res
?separate()
?separate
separate(res,sex_class,c("sex","class"))
submit()
submit()
submit()
submit()
?chain
submit
submit()
submit()
student3
students3
?gather
submit()
?spread
submit()
submit()
submit()
demo(spread)
demo(tidyr)
example(spread)
submit()
extract_numeric("class5")
?mutate
submit
submit()
submit()
students4
submit()
?unique
submit()
submit()
passed
failed
mutate(passed,status="passed")
passed <- passed%>%mutate(status="passed")
failed <- failed%>%
mutate(status="failed")
?rbind_list
rbind_list(passed,failed)
sat
View(sat)
sat
info()
skip()
swirl()
sat
swirl()
library(swirl)
swirl()
sat
View(sat)
sat
info()
skip()
class(sat)
names(sat)
head(sat)
sat[,1]
sat[1,]
class(sat$score_range)
class(sat$read_male)
library(swirl)
swirl()
sat[1,1] = "700-800"
sat
View(sat)
?select
?gather()
?separate()
submit()
?gather
?separate
submit()
submit()
select(sat,-contains("total"))
i <- select(sat,-contains("total"))
m <- gather(i,part_sex,count,-score_range)
View(m)
n <- separate(m,part_sex,c("part","sex"))
View(n)
submit()
submit()
?group_by
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day,label=True)
wday(this_day,label=T)
wday(this_day,label=TRUE)
this_moment <- now()
this_moment
second(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12,1975")
mdy("March 12, 1975")
dmy(25081985)
Try ymd("192012")
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment,hours=8,minutes=34,seconds=55)
this_moment
this_moment <- update(this_moment,hours=hour(now()),minutes=minute(now()))
this_moment
?now
nyc <- now(tzone="America/New_York")
nyc
depart <- nyc+days(2)
depart
depart <- update(depart,hours=17,minutes=34)
depart
arrive <- depart+hours(15)+minutes(50)
?with_tz
with_tz(arrive,"Asia/Hong_Kong")
with_tz(arrive, "Asia/Hong_Kong")
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008",tz="Singapore")
last_time
?new_interval
last_time <- mdy("06 17, 2008",tz="Singapore")
new_interval(last_time,arrive)
how_long <- new_interval(last_time,arrive)
as.period(how_long)
stopwatch()
?pnorm
?norm
?dnorm
dnorm(70,mean=80,sd=10)
pnorm(70,mean=80,sd=10)
qnorm(95%,mean=1100,sd=75)
qnorm(95,mean=1100,sd=75)
qnorm(95%,mean=1100,sd=75)
qnorm(0.95,mean=1100,sd=75)
qnorm(0.95,mean=1100,sd=7.5)
dbi
?dbi
??dbi
?dbinom
pbinom(4:5.5,0.5)
pbinom(4:5,5,0.5)
dbinom(4:5,5,0.5)
0.15625+0.03125
?ppois
ppois(10,3)
ppois(10,15)
pnorm(14,mean=15,sd=1)
pnorm(16,mean=15,sd=1)
0.8413447-0.1586553
setwd("~/Coursera_reproduce/assign1")
activity <- read.csv("activity.csv",sep=",")
library(dplyr)
sum1 <- aggregate(steps~date,data=activity,sum)
hist(sum1$steps)
?hist
hist(sum1$steps,main="the total number of steps taken each day",xlab="steps")
mean1 <- mean(sum1$steps)
median1 <- median(sum1$steps)
interval <- aggregate(steps~interval,data=activity,sum)
View(interval)
View(activity)
?tapply
interval_m <- aggregate(steps~interval,data=activity,mean)
View(interval_m)
?plot
plot(interval_m$interval,interval_m$steps,type="l")
plot(interval_m$interval,interval_m$steps,type="l",main="the average daily activity pattern",xlab="interval",ylab="steps")
max1 <- interval_m[,max(interval_m$steps)]
?select
?wwhich
?which
max1 <- interval_m$interval(which(interval_m$steps=max(interval_m$steps)))
max1 <- interval_m$interval(which(interval_m$steps==max(interval_m$steps)))
?select
max1 <- interval_m$interval(which.max(interval_m$steps))
?which.max
interval_m$interval(2)
interval_m$interval[2]
max1 <- interval_m$interval[which.max(interval_m$steps)]
max1
?is.na
?select
select(activity,is.na(steps))
?subset
subset(activity,is.na(steps))
ana <- subset(activity,is.na(steps))
View(ana)
subset(activity,is,na(date))
subset(activity,is.na(date))
rows(ana)
nrows(ana)
nrow(ana)
row <- nrow(ana)
View(interval_m)
?merge
mer <- merge(activity,interval_m,by.x=interval,by.y=interval)
mer <- merge(activity,interval_m,by.x=activity$interval,by.y=interval_m$interval)
?data.table
?key
??key
mer <- merge(activity,interval_m,by=interval)
mer <- merge(interval_m,activity,by=interval)
mer <- merge(interval_m,activity,by=interval,all=TRUE)
View(activity)
View(interval_m)
mer <- merge(activity,interval_m,by=interval,all=T)
mer <- merge(activity,interval_m)
View(mer)
mer <- merge(activity,interval_m,all=T)
View(mer)
mer <- merge(interval_m,activity,all=T)
View(mer)
subset(activity,is.na(date))
bna <- subset(activity,is.na(date))
View(bna)
mer <- merge(interval_m,activity)
mer <- merge(interval_m,activity,all.y=T)
View(mer)
mer <- merge(interval_m,activity,all.x=T)
View(mer)
x <- data.frame(k1 = c(NA,NA,3,4,5), k2 = c(1,NA,NA,4,5), data = 1:5)
y <- data.frame(k1 = c(NA,2,NA,4,5), k2 = c(NA,NA,3,4,5), data = 1:5)
View(x)
View(y)
merge(x, y, by = c("k1","k2"))
merge(x, y, by = "k1")
merge(x, y, by = "k2", incomparables = NA)
merge(x, y, by = "k2")
mer <- merge(interval_m,activity,by=steps)
mer <- merge(interval_m,activity,by="steps")
mer <- merge(interval_m,activity,by="interval")
View(mer)
mer <- merge(activity,interval_m,activity,by="interval")
mer <- merge(activity,interval_m,activity,by="interval")
mer <- merge(activity,interval_m,by="interval")
View(mer)
mer$steps.x[is.na(mer$steps.x)] <- mer$steps.y[is.na(mer$steps.x)]
View(mer)
mer1 <- mer[,-4]
View(mer1)
sum2 <- aggregate(steps.x~date,data=mer1,sum)
View(sum2)
View(sum1)
hist(sum2$steps.x,main="the total number of steps taken each day",xlab="steps")
mean2 <- mean(sum2$steps.x)
median2 <- median(sum2$steps.x)
?mutate
mer2 <- mutate(mer1,week=weekdays(date))
?weekdays
class(mer1$date)
?read.csv
activity <- read.csv("activity.csv",sep=",",stringsAsFactors=F)
class(activity$date)
?as.date
?as.Date
activity$date <- as.Date(activity$date,"%y-%m-%d")
View(activity)
activity$date <- as.Date(activity$date,"%y%m%d")
View(activity)
activity <- read.csv("activity.csv",sep=",",stringsAsFactors=F)
activity$date <- as.Date(activity$date,"%y%m%d")
View(activity)
activity <- read.csv("activity.csv",sep=",",stringsAsFactors=F)
View(activity)
activity$date <- as.Date(activity$date,"%y-%m-%d")
View(activity)
as.Date("2012-10-01","%y-%m-%d")
activity <- read.csv("activity.csv",sep=",",stringsAsFactors=F)
activity$date <- as.Date(activity$date)
View(activity)
class(activity$date)
mer <- merge(activity,interval_m,by="interval")
View(mer)
mer$steps.x[is.na(mer$steps.x)] <- mer$steps.y[is.na(mer$steps.x)]
mer1 <- mer[,-4]
mer2 <- mutate(mer1,week=weekdays(date))
View(mer2)
weekdays(2012-10-01)
head(mer2)
Sys.setlocale(category = "LC_TIME", locale = "C")
mer2 <- mutate(mer1,week=weekdays(date))
View(mer2)
?select
?which.any
mer2$week[which(mer2$week%in%c("Saturday","Sunday"))] <- "weekend"
View(mer2)
mer2$week[!which(mer2$week%in%c("Saturday","Sunday"))] <- "weekday"
View(mer2)
mer2$week[-which(mer2$week%in%c("Saturday","Sunday"))] <- "weekday"
View(mer2)
?which
mer2$week[which(mer2$week!%in%c("Saturday","Sunday"))] <- "weekday"
mer2$week[which(!mer2$week%in%c("Saturday","Sunday"))] <- "weekday"
View(mer2)
mer2 <- mutate(mer1,week=weekdays(date))
View(mer2)
mer2$week[which(mer2$week%in%c("Saturday","Sunday"))] <- "weekend"
mer2$week[which(mer2$week%in%c("Saturday","Sunday"))] <- "weekend"
View(mer2)
mer2$week[which(mer2$week!=="weekend")] <- "weekday"
mer2$week[which(mer2$week!="weekend")] <- "weekday"
View(mer2)
?aggregate
meanw <- aggregate(steps~interval+week,data=mer2,mean)
